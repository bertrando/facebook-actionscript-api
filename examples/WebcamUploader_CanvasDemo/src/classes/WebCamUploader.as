package  {	import fl.controls.Button;	import fl.controls.TextArea;		import flash.display.LoaderInfo;	import flash.display.BitmapData;	import flash.display.Bitmap;	import flash.display.MovieClip;	import flash.display.Stage;	import flash.display.StageAlign;    import flash.display.StageScaleMode;		import flash.events.MouseEvent;	import flash.events.StatusEvent;	import flash.geom.Matrix;	import flash.media.Camera;	import flash.media.Video;	import flash.net.navigateToURL;	import flash.net.URLRequest;		import com.facebook.commands.profile.SetFBML;	import com.facebook.commands.photos.UploadPhoto;	import com.facebook.commands.users.HasAppPermission;	import com.facebook.data.BooleanResultData;	import com.facebook.data.auth.ExtendedPermissionValues;	import com.facebook.data.users.HasAppPermissionValues;	import com.facebook.errors.FacebookError;	import com.facebook.events.FacebookEvent;	import com.facebook.Facebook;	import com.facebook.session.WebSession;	import com.facebook.utils.FacebookSessionUtil;		public class WebCamUploader extends MovieClip {				// Constants:		protected static const API_KEY:String = '';		protected static const SECRET_KEY:String = '';				// Protected Properties:		protected var spinner:Spinner;				protected var fbSessionUtil:FacebookSessionUtil;		protected var fb:Facebook;		protected var paramObj:Object;				protected var video:Video;		protected var camera:Camera;		protected var bitmap:Bitmap;		protected var bitmapData:BitmapData;		protected var snapShot:BitmapData;						// Initialization:		public function WebCamUploader() { 			configUI();		}			// Protected Methods:		protected function configUI():void {			stage.scaleMode = StageScaleMode.NO_SCALE;			stage.align = StageAlign.TOP_LEFT;						// Get FlashVars			paramObj = loaderInfo.parameters;						spinner = new Spinner();			spinner.x = 214 - spinner.width >> 1;			spinner.y = 255 - spinner.height - 40 >> 1;						uploadPic.addEventListener(MouseEvent.MOUSE_UP, uploadPhoto, false, 0, true);			deletePic.addEventListener(MouseEvent.MOUSE_UP, deletePhoto, false, 0, true);			errorDialog.addEventListener(MouseEvent.MOUSE_UP, closeErrorDialog, false, 0, true);			appAllowBtn.addEventListener(MouseEvent.MOUSE_UP, sendUserToAllow, false, 0, true);			permissionBtn.addEventListener(MouseEvent.MOUSE_UP, sendUserToPermissions, false, 0, true);			takePic.addEventListener(MouseEvent.MOUSE_UP, onTakeSnapShot, false, 0, true);						isAppAllowed(paramObj.fb_sig_session_key);					}				protected function isAppAllowed(p_sigSessionKey:String):void {			if (p_sigSessionKey != null) {				fbSessionUtil = new FacebookSessionUtil(API_KEY, SECRET_KEY, loaderInfo);				fbSessionUtil.addEventListener(FacebookEvent.CONNECT, onFacebookConnect, false, 0, true);				fbSessionUtil.addEventListener(FacebookEvent.WAITING_FOR_LOGIN, onWaitingForLogin, false, 0, true);				fbSessionUtil.addEventListener(FacebookEvent.VERIFYING_SESSION, onVerifySession, false, 0, true);								//Store of a refernce to Facebook, to allow for easier API calls.				fb = fbSessionUtil.facebook;								setAppState("unblock");				fbSessionUtil.verifySession();							} else {				handleError(false, "We need you to allow the app to access your info");				setAppState("block");			}		}				protected function onVerifySession(p_event:FacebookEvent):void {					}				protected function onWaitingForLogin(p_event:FacebookEvent):void {			if (p_event.success){				// Success			} else {				handleError(p_event.success, "Error Login not Succesfull");			}		}				protected function onFacebookConnect(p_event:FacebookEvent):void {			if (p_event.success){				checkPermissions();				setApplicationFBML();			} else {								handleError(p_event.success, "Error, Cannot Connect to Facebook");			}		}				protected function sendUserToPermissions(p_event:MouseEvent):void {			fb.grantExtendedPermission(ExtendedPermissionValues.PHOTO_UPLOAD);		}				protected function setApplicationFBML():void {			/**			* Set the swfsrc and imgsrc to an URL on your server.			* 			*/			var profile_main:String = "<fb:swf swfsrc='webCamUploader.swf' imgsrc='webcampreview.jpg' swfbgcolor='006599'  id='simpleApp' width='214' height='255' />";			var profile:String = "<fb:swf swfsrc='webCamUploader.swf' imgsrc='webcampreview.jpg' swfbgcolor='006599'  id='simpleApp' width='100%' height='255' />";            var call:SetFBML = new SetFBML(null, null, profile, null,profile_main);			call.addEventListener(FacebookEvent.COMPLETE, onWorked, false, 0, true);			fb.post(call);		}				protected function onWorked(p_event:FacebookEvent):void {			if (p_event.success) {				// Success				if (stage.stageWidth < 214) {					handleError(false, "Cannot execute application. \nPlease move to a wider area.");					disableApp();				} else if (stage.stageWidth >= 214) {					connectMyCamera();					snapShot = new BitmapData(video.width, video.height);					bitmap = new Bitmap(snapShot);						setAppState("default");				}							} else {				handleError(p_event.success, "Error, Application FBML Call did not Work");			}					}				protected function checkPermissions():void {			var call:HasAppPermission = new HasAppPermission(HasAppPermissionValues.PHOTO_UPLOAD);			call.addEventListener(FacebookEvent.COMPLETE, onPermissionApproved, false, 0, true);			fb.post(call);		}				protected function onPermissionApproved(p_event:FacebookEvent):void {			(p_event.data as BooleanResultData).value			if (p_event.success && ((p_event.data as BooleanResultData).value)){				// Success				permissionBtn.visible = false;				permissionBtn.enabled = false;							} else {				permissionBtn.visible = true;				permissionBtn.enabled = true;			}		}				protected function sendUserToAllow(p_event:MouseEvent):void {			fb.login(true);		}				protected function connectMyCamera():void {			camera = Camera.getCamera();						if (camera != null) {                video = new Video(214, 160.5);				video.attachCamera(camera);				video.x = 0;				video.y = 26;				addChild(video);								camera.addEventListener(StatusEvent.STATUS, cameraStatus, false, 0, true);            } else {                handleError(false, "Error, You need a camera.");            }		}				protected function disableApp():void {			errorDialog.removeEventListener(MouseEvent.MOUSE_UP, closeErrorDialog);			takePic.enabled = false;		}				protected function cameraStatus(p_event:StatusEvent):void {			camera.removeEventListener(StatusEvent.STATUS, cameraStatus);						switch (p_event.code) {				case "Camera.Muted":					handleError(false, "Error, Camera not found or denied. Unable to use Application. \nTo allow the Camera, reload the page.");					disableApp();				case "Camera.Unmuted":					// Camera accepted and Successfull;					break;			}		}				protected function onTakeSnapShot(p_event:MouseEvent):void {			setAppState("pictureTaken");						snapShot.draw(video, new Matrix());			bitmapData = snapShot;						bitmap.x = 0;			bitmap.y = 26;					addChild(bitmap);		}				protected function deletePhoto(p_event:MouseEvent):void {			setAppState("default");			removeChild(bitmap);		}				protected function uploadPhoto(p_event:MouseEvent):void {			setAppState("uploading");			showSpinner(true);						var date:Date = new Date();			var call:UploadPhoto = new UploadPhoto(bitmapData);			call.addEventListener(FacebookEvent.COMPLETE, onPhotoUploadComplete, false, 0, true);			fb.post(call);					}				protected function onPhotoUploadComplete(p_event:FacebookEvent):void {			if (p_event.success) {				// Success				showSpinner(false);				uploadPic.label = "Upload Complete";				deletePhoto(null);			} else {				handleError(p_event.success, "Error, Photo Cannot be uploaded");			}					}				protected function handleError(p_success:Boolean, p_text:String=null):void {			if (p_success) {				// There was NO Error				errorDialog.x = 1000;				errorDialog.y = 1000;			} else {				addChild(errorDialog);				errorDialog.x = 0;				errorDialog.y = 0;				errorDialog.errorText.text = p_text;			}		}				protected function showSpinner(p_loading:Boolean):void {			if(p_loading) {				addChild(spinner);				spinner.play();			} else {				removeChild(spinner);				spinner.stop();			}		}				protected function closeErrorDialog(p_event:MouseEvent):void {			handleError(true);		}				protected function setAppState(p_state:String):void {			switch (p_state) {				case "default":					uploadPic.enabled = false;					deletePic.enabled = false;					takePic.enabled = true;					break;				case "pictureTaken":					uploadPic.label = "Upload";					uploadPic.enabled = true;					deletePic.enabled = true;					takePic.enabled = false;					break;				case "uploading":					uploadPic.enabled = false;					deletePic.enabled = false;					break;				case "block":					addChild(appAllowBtn);					appAllowBtn.enabled = true;					appAllowBtn.label = "Allow Access Now";					errorDialog.removeEventListener(MouseEvent.MOUSE_UP, closeErrorDialog);					break;				case "unblock":					appAllowBtn.enabled = false;					appAllowBtn.visible = false;					errorDialog.addEventListener(MouseEvent.MOUSE_UP, closeErrorDialog, false, 0, true);					break;			}		}			}}