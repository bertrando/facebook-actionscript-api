<?xml version="1.0" encoding="utf-8"?>
<mx:HBox
	xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:controls1="com.facebook.streamdemo.controls.*"
	xmlns:controls="com.gskinner.controls.*"
	xmlns:local="*"
	width="100%" verticalScrollPolicy="off" horizontalScrollPolicy="off" horizontalGap='0'
	>
	<mx:Script>
		<![CDATA[
			import fb.FBConnect;
			import com.facebook.data.auth.ExtendedPermissionValues;
			import com.facebook.errors.FacebookError;
			import com.facebook.data.BooleanResultData;
			import com.facebook.events.FacebookEvent;
			import com.facebook.streamdemo.events.StreamEvent;
			import com.facebook.streamdemo.data.StreamModel;
			import com.facebook.commands.stream.RemoveComment;
			import mx.events.CloseEvent;
			import com.facebook.streamdemo.dialogs.MessageWindow;
			import com.facebook.streamdemo.data.FriendsModel;
			import com.gskinner.utils.RegExpUtils;
			import com.facebook.streamdemo.ui.Assets;
			import com.facebook.streamdemo.ui.Styles;
			import com.facebook.streamdemo.utils.TimeFormatter;
			import mx.events.PropertyChangeEvent;
			
			import com.facebook.data.users.FacebookUser;
			import com.facebook.data.stream.PostCommentData;
			import com.chewtinfoil.utils.StringUtils;
			
			protected var comment:PostCommentData;
			protected var commentsHasChanged:Boolean;
			protected var _lastItem:Boolean;
			protected var styleHasBeenSet:Boolean;
			
			protected static const LABEL_TEMPLATE:String = '<a href="event:{profileUrl}">{actor}</a><span class="content"> {title}</span>';
			
			[Bindable]
			protected var _user:FacebookUser;
			
			public function setModel(value:PostCommentData, user:FacebookUser):void {
				comment = value;
				_user = user;
				_user.addEventListener(PropertyChangeEvent.PROPERTY_CHANGE, onUserChange, false, 0, true);
				commentsHasChanged = true;
			}
			
			protected function onUserChange(event:PropertyChangeEvent):void {
				if (event.property == 'name') {
					drawDescription();
				}
			}
			
			override protected function commitProperties():void {
				super.commitProperties();
				
				if (commentsHasChanged) {
					description.text = comment.text;
					removeBtn.visible = comment.fromid == String(FBConnect.session.uid);
					commentsHasChanged = false;
				}
				
				if (description) {
					drawDescription();
					dateLbl.text = TimeFormatter.dateToString(comment.time);
				}
				
				if (commentDivider) { commentDivider.visible = !_lastItem; }
			}
			
			protected function drawDescription():void {
				description.htmlText = StringUtils.supplant(LABEL_TEMPLATE, {actor:(_user.name==null) ? "" : _user.name, title:RegExpUtils.parseURLs(comment.text), profileUrl:_user.profile_url});
				//wdg:: Only set the style once, setting twice causes bugs (text not displaying properly).
				if (styleHasBeenSet == false) {
					description.setStyleSheet(Styles.getStyleSheet('commentTitle'));
					styleHasBeenSet = true;
				}
			}
			
			public function set lastItem(p_bool:Boolean):void {
				_lastItem = p_bool;
				invalidateProperties();
			}
			
			protected function onProfileLink(event:TextEvent):void {
				navigateToURL(new URLRequest(event.text));
			}
			
			protected function removeComment():void {
				MessageWindow.show('Are you sure you want to delete this comment?', 'Delete Comment', MessageWindow.OK|MessageWindow.CANCEL, onConfirmCommentDelete);
			}
			
			protected function onConfirmCommentDelete(event:CloseEvent):void {
				if (event.detail == MessageWindow.OK) {
					StreamModel.removeComment(comment.id, String(FBConnect.session.uid));
					StreamModel.getInstance().addEventListener(StreamEvent.COMMENT_REMOVED, onCommentRemoved);
				}
			}
			
			protected function onCommentRemoved(event:StreamEvent):void {
				var fbData:BooleanResultData = event.data as BooleanResultData;
				if (fbData != null && fbData.value == true) {
					dispatchEvent(new StreamEvent(StreamEvent.REMOVE_ROW));
				} else if (event.data is FacebookError && (event.data as FacebookError).errorCode == 200) {
					MessageWindow.show('You need to allow the "Publish Stream" permission to continue.  Click Okay to get it.', 'Continue', MessageWindow.OK|MessageWindow.CANCEL, showPerms);
				} else {
					MessageWindow.show('Error deleting comment, please try again later.', 'Error', MessageWindow.OK);
				}
			}
			
			protected function showPerms(event:CloseEvent):void {
				if (event.detail == MessageWindow.OK) {
					FBConnect.requirePermissions([ExtendedPermissionValues.PUBLISH_STREAM]);
				}
			}
			
		]]>
	</mx:Script>
	
	<controls1:Avatar id="avatar" width="30" height="30" source="{_user.pic_square}" previewSource="{Assets.blankAvatarSmall}" />
	<mx:Spacer width='5'/>
	<mx:VBox minHeight='30' width="100%" verticalScrollPolicy="off" horizontalScrollPolicy="off" verticalGap='0'>
		<mx:HBox width="100%" verticalAlign="top">
			<controls:HTMLText minWidth = '25' id="description" link="onProfileLink(event)" selectable="true" width = '100%' />
			<mx:Button id="removeBtn" width="10" height="10" styleName="closeButton" click="removeComment()" buttonMode="true" useHandCursor="true" />
		</mx:HBox>
		<mx:Spacer height='100%'/>
		<mx:Label id="dateLbl" styleName="dateLabel" />
		<mx:HRule id='commentDivider' strokeColor="#FFFFFF" strokeWidth="1" width = '100%'/>
	</mx:VBox>
</mx:HBox>
